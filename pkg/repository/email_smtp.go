package repository

import (
	"fmt"
	"math"
	"math/rand"
	"net/smtp"
	"strconv"

	"github.com/SanyaWarvar/temple_api/pkg/models"
	"github.com/jmoiron/sqlx"
)

type EmailCfg struct {
	OwnerEmail    string
	OwnerPassword string
	Address       string
	codeLenght    int
}

type EmailSmtpPostgres struct {
	db  *sqlx.DB
	cfg *EmailCfg
}

func NewEmailCfg(ownerEmail, ownerPassword, addr string, codeLenght int) *EmailCfg {
	return &EmailCfg{
		OwnerEmail:    ownerEmail,
		OwnerPassword: ownerPassword,
		Address:       addr,
		codeLenght:    codeLenght,
	}
}

func NewEmailSmtpPostgres(db *sqlx.DB, cfg *EmailCfg) *EmailSmtpPostgres {
	return &EmailSmtpPostgres{db: db, cfg: cfg}
}

func (r *EmailSmtpPostgres) ConfirmEmail(email string) error {
	query := fmt.Sprintf(`UPDATE %s SET confirmed_email=true WHERE email = $1`, usersTable)
	_, err := r.db.Exec(query, email)
	return err
}

func (r *EmailSmtpPostgres) CheckEmailConfirm(email string) (bool, error) {
	var status bool
	query := fmt.Sprintf(`SELECT confirmed_email FROM %s WHERE email = $1`, usersTable)
	err := r.db.Get(&status, query, email)
	return status, err
}

func (r *EmailSmtpPostgres) SendConfirmEmailMessage(user models.User, code string) error {
	baseText := "Hello, %s. Please, confirm your email with this code: %s. If you don't ask this code just ignore this message. This message is autogenerated. Please don't answer."
	text := fmt.Sprintf(baseText, user.Username, code)
	subject := fmt.Sprintf("Email confirm code %s", code)
	return r.SendMessage(user.Email, text, subject)
}

func (r *EmailSmtpPostgres) SendMessage(email, messageText, title string) error {
	toEmail := email
	fromEmail := r.cfg.OwnerEmail

	subject_body := fmt.Sprintf("Subject:%s\n\n %s", title, messageText)
	status := smtp.SendMail(
		r.cfg.Address,
		smtp.PlainAuth("", fromEmail, r.cfg.OwnerPassword, "smtp.gmail.com"),
		fromEmail,
		[]string{toEmail},
		[]byte(subject_body),
	)

	return status
}

func (r *EmailSmtpPostgres) GenerateConfirmCode() string {
	code := rand.Intn(int(math.Pow10(r.cfg.codeLenght)))
	return strconv.Itoa(code)
}
