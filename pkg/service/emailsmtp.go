package service

import (
	"fmt"
	"math"
	"math/rand"
	"net/smtp"
	"strconv"

	"github.com/SanyaWarvar/temple_api/pkg/models"
	"github.com/SanyaWarvar/temple_api/pkg/repository"
)

type EmailSmtp struct {
	Cache    repository.Cacher
	settings EmailSettings
}

type EmailSettings struct {
	OwnerEmail    string
	OwnerPassword string
	Address       string
	codeLenght    int
}

func NewEmailSettings(ownerEmail, ownerPassword, addr string, codeLenght int) *EmailSettings {
	return &EmailSettings{
		OwnerEmail:    ownerEmail,
		OwnerPassword: ownerPassword,
		Address:       addr,
		codeLenght:    codeLenght,
	}
}

func NewEmailSmtpService(cache repository.Cacher, settings EmailSettings) *EmailSmtp {
	return &EmailSmtp{
		Cache:    cache,
		settings: settings,
	}
}

func (s *EmailSmtp) SendMessage(email, messageText, title string) error {

	toEmail := email
	fromEmail := s.settings.OwnerEmail

	subject_body := fmt.Sprintf("Subject:%s\n\n %s", title, messageText)
	status := smtp.SendMail(
		"smtp.gmail.com:587",
		smtp.PlainAuth("", fromEmail, s.settings.OwnerPassword, "smtp.gmail.com"),
		fromEmail,
		[]string{toEmail},
		[]byte(subject_body),
	)

	return status
}

func (s *EmailSmtp) generateCode() string {
	code := rand.Intn(int(math.Pow10(s.settings.codeLenght)))
	return strconv.Itoa(code)
}

func (s *EmailSmtp) SendConfirmEmailMessage(user models.User) error {
	code := s.generateCode()
	s.Cache.SaveConfirmCode(user.Email, code)
	baseText := "Hello, %s. Please, confirm your email with this code: %s. If you don't ask this code just ignore this message. This message is autogenerated. Please don't answer."
	text := fmt.Sprintf(baseText, user.Username, code)
	subject := fmt.Sprintf("Email confirm code %s", code)
	return s.SendMessage(user.Email, text, subject)
}
